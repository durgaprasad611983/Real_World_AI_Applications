# -*- coding: utf-8 -*-
"""HumanResource.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15gKxr7oFU8AVy6cldOlbNZY0wrriIoHl
"""

import streamlit as st
from streamlit_option_menu import option_menu
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd
import datetime
import os
import requests
from io import BytesIO
import mediapipe as mp
import cv2
from streamlit_webrtc import webrtc_streamer, VideoTransformerBase
import av
import matplotlib.pyplot as plt
import seaborn as sns
from io import StringIO
import spacy 
from PyPDF2 import PdfReader
import docx2txt
from sentence_transformers import SentenceTransformer, util

def render_styled_table(df):
    st.markdown("""
        <style>
            .styled-table {
                border-collapse: collapse;
                margin: 25px 0;
                font-size: 0.9em;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                width: 100%;
                border: 1px solid #ddd;
            }
            .styled-table th, .styled-table td {
                padding: 12px 15px;
                border: 1px solid #ddd;
                text-align: center;
            }
            .styled-table thead {
                background-color: #009879;
                color: #ffffff;
            }
            .styled-table tbody tr:nth-child(even) {
                background-color: #f3f3f3;
            }
        </style>
    """, unsafe_allow_html=True)

    html_table = df.to_html(index=False, classes="styled-table")
    st.markdown(html_table, unsafe_allow_html=True)

class HumanResouceTab:

    def __init__(self):
        pass

    def Resume_Matching(self):
        st.markdown(" ", unsafe_allow_html=True)
        st.markdown(
        """
        <div style='
            background-color: #EEEEEE;
            padding: 10px 20px;
            border-radius: 10px;
            border: 1px solid #ccc;
            margin-bottom: 30px;
            text-align: center;
        '>
            <h4 style='color: #1a1a1a;'> üìÑ Resume to JD Matching </h4>
        """,
        unsafe_allow_html=True
                )

        from sentence_transformers import SentenceTransformer, util

        model = SentenceTransformer('paraphrase-MiniLM-L6-v2')

        def get_similarity_score(resume_text, jd_text):
            embeddings = model.encode([resume_text, jd_text], convert_to_tensor=True)
            score = util.pytorch_cos_sim(embeddings[0], embeddings[1])
            return float(score[0][0]) * 100

        resume_input = st.text_area("Paste Resume Text", key="Resume")
        jd_input = st.text_area("Paste Job Description", key="JD")

        if st.button("Compute Match"):
            score = get_similarity_score(resume_input, jd_input)
            st.success(f"‚úÖ Resume Match Score: {score:.2f}%")

            resume_words = set(resume_input.lower().split())
            jd_words = set(jd_input.lower().split())
            matched_skills = jd_words.intersection(resume_words)
            missing_skills = jd_words - resume_words

            st.markdown(f"**Matched Keywords:** {', '.join(list(matched_skills)[:10])}")
            st.markdown(f"**Missing Keywords:** {', '.join(list(missing_skills)[:10])}")

    def Resume_Parsing(self):
        st.markdown(" ", unsafe_allow_html=True)
        st.markdown(
        """
        <div style='
            background-color: #EEEEEE;
            padding: 10px 20px;
            border-radius: 10px;
            border: 1px solid #ccc;
            margin-bottom: 30px;
            text-align: center;
        '>
            <h4 style='color: #1a1a1a;'> üìÑ Resume to JD Matching </h4>
        """,
        unsafe_allow_html=True
                )

        nlp = spacy.load("en_core_web_sm")

        def extract_text_from_pdf(uploaded_file):
            pdf_reader = PdfReader(uploaded_file)
            text = "\n".join([page.extract_text() for page in pdf_reader.pages if page.extract_text()])
            return text

        def extract_text_from_docx(uploaded_file):
            return docx2txt.process(uploaded_file)

        def extract_resume_fields(text):
            doc = nlp(text)
            fields = {
                "Name": next((ent.text for ent in doc.ents if ent.label_ == "PERSON"), "Not Found"),
                "Email": next((token.text for token in doc if "@" in token.text), "Not Found"),
                "Skills": [token.text for token in doc if token.pos_ == "NOUN" and token.text.istitle()],
                "Education": next((ent.text for ent in doc.ents if ent.label_ == "ORG" or "University" in ent.text), "Not Found")
            }
            return fields

        uploaded_resume = st.file_uploader("Upload Resume (PDF/DOCX)", type=["pdf", "docx"])

        if uploaded_resume:
            if uploaded_resume.name.endswith(".pdf"):
                resume_text = extract_text_from_pdf(uploaded_resume)
            else:
                resume_text = extract_text_from_docx(uploaded_resume)

            st.info("üìã Extracting data...")
            parsed_data = extract_resume_fields(resume_text)
            st.json(parsed_data)

            st.download_button("üì• Download Parsed Resume (JSON)",
                              data=str(parsed_data),
                              file_name="parsed_resume.json",
                              mime="application/json")

    def Productivity_Monitoring(self):
        st.markdown(" ", unsafe_allow_html=True)
        st.markdown(
        """
        <div style='
            background-color: #EEEEEE;
            padding: 10px 20px;
            border-radius: 10px;
            border: 1px solid #ccc;
            margin-bottom: 30px;
            text-align: center;
        '>
            <h4 style='color: #1a1a1a;'> üìä Productivity Monitoring (Simulated) </h4>
        """,
        unsafe_allow_html=True
                )

        st.subheader("üìä Productivity Monitoring (Simulated)")
        st.write("Track usage and productivity of remote employees.")

        # Generate dummy heatmap data
        days = ["Mon", "Tue", "Wed", "Thu", "Fri"]
        hours = list(range(9, 18))  # 9 AM to 5 PM
        data = np.random.randint(20, 100, size=(len(hours), len(days)))

        # Create figure
        fig, ax = plt.subplots(figsize=(6, 4))
        sns.heatmap(data, xticklabels=days, yticklabels=hours, cmap="YlGnBu", annot=True, ax=ax)
        ax.set_title("Employee Activity Heatmap")
        ax.set_xlabel("Day")
        ax.set_ylabel("Hour")
        st.pyplot(fig)
        fig.savefig("C:/Users/Prasad/Anaconda3/envs/py39/AI_Webinar/Real_World_Applications/Data/Human Resource/assets/productivity_heatmap.png")

        st.image("C:/Users/Prasad/Anaconda3/envs/py39/AI_Webinar/Real_World_Applications/Data/Human Resource/assets/productivity_heatmap.png", caption="üïí Weekly Activity Heatmap")
        data = pd.DataFrame({
            "Engagement Score": [90, 87, 75, 60, 50]
        }, index=["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"])

        st.bar_chart(data)

        st.warning("‚ö†Ô∏è Drop in engagement detected on Thursday and Friday.")

        # --- INTERPRETATION / INSIGHTS ---
        st.markdown(" ", unsafe_allow_html=True)
        st.markdown(" ", unsafe_allow_html=True)
        st.markdown(
        """
        <div style='
            background-color: #EEEEEE;
            padding: 10px 20px;
            border-radius: 10px;
            border: 1px solid #ccc;
            margin-bottom: 30px;
            text-align: center;
        '>
            <h4 style='color: #1a1a1a;'> üìå Insights Summary </h4>
        """,
        unsafe_allow_html=True
                )
        #st.markdown("### üìå Insights Summary")

        st.markdown("""
        #### üîç How to Read the Heatmap
        - **Rows** represent hours of the day (9 AM to 5 PM).
        - **Columns** represent days of the week (Monday to Friday).
        - **Cell colors** show the intensity of productivity:
          - üíô **Darker Blue**: Lower activity (possibly breaks, disengagement).
          - üíö **Green**: Moderate engagement.
          - üíõ **Yellowish**: High engagement (peak working time).
        - **Numbers** inside cells are engagement scores (out of 100).

        #### ‚úÖ Key Observations
        - **üî• Peak Productivity**: Mid-mornings (10‚Äì12 AM) especially on **Tuesday and Wednesday**.
        - **‚ùÑÔ∏è Drop in Engagement**: Gradual decline from **Thursday afternoon to Friday evening**.
        - **üç¥ Lunch Break Pattern**: Noticeable drop around **1‚Äì2 PM**, indicating typical break time.
        - **üìâ Consistent Decline**: Activity falls significantly after 3 PM‚Äîpossible fatigue or end-of-day tasks.
        - **üö® Watch Zones**: Very low scores (<30) on Friday afternoons may require check-ins or engagement nudges.

        #### üß† Business Interpretation
        - Consider **scheduling key meetings** earlier in the week or before 2 PM.
        - Use low activity periods for **creative work**, **wellness breaks**, or **learning sessions**.
        - If remote, consider if employees have **flexible schedules** affecting these patterns.

        """)