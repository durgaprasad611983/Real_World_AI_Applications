# -*- coding: utf-8 -*-
"""Healthcare.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gm_XvKcZkFU7jcPoY5nzL_pC4zeGG9oM
"""

# tabs/healthcare.py

import streamlit as st
from streamlit_option_menu import option_menu
from PIL import Image
import random
import pandas as pd
import plotly.express as px
import numpy as np

class HealthcareTab:

    def __init__(self):
        pass  

    def Cancer_Detection(self):
        st.header("üß™ Upload a Medical Scan (X-ray, CT, etc.)")
        st.markdown(" ", unsafe_allow_html=True)
        st.markdown(" ", unsafe_allow_html=True)

        uploaded_image = st.file_uploader(
            label="Upload Image (PNG, JPG)", 
            type=["png", "jpg", "jpeg"], 
            key="cancer_detection_upload"
        )

        st.markdown(" ", unsafe_allow_html=True)
        st.markdown(" ", unsafe_allow_html=True)

        st.markdown("""
            <div style='
                background-color: #EEEEEE;
                padding: 10px 20px;
                border-radius: 10px;
                border: 1px solid #ccc;
                margin-bottom: 30px;
                text-align: center;
            '>
                <h4 style='color: #1a1a1a;'> Medical Image Scan Prediction Results </h4>
            </div>
        """, unsafe_allow_html=True)

        if uploaded_image:
            image = Image.open(uploaded_image)
            st.image(image, caption="Uploaded Scan", use_column_width=True)
            st.info("Analyzing scan with AI model... (simulated)")

            label = random.choice([
                "Adenocarcinoma Detected", 
                "Large Cell Carcinoma Detected", 
                "No Lung Cancer Detected"
            ])
            confidence = round(random.uniform(82.0, 97.0), 2)

            st.success(f"ü©∫ Result: **{label}**")
            st.metric(label="Confidence", value=f"{confidence}%")
            st.markdown("‚ö†Ô∏è *Disclaimer: This is a demo simulation. Not for medical use.*")
            st.markdown(" ", unsafe_allow_html=True)
            st.markdown("---", unsafe_allow_html=True)
            st.markdown(" ", unsafe_allow_html=True)

        st.markdown("""
            <div style='
                background-color: #EEEEEE;
                padding: 10px 20px;
                border-radius: 10px;
                border: 1px solid #ccc;
                margin-bottom: 30px;
                text-align: center;
            '>
                <h4 style='color: #1a1a1a;'> AI Chatbot Assistant </h4>
            </div>
        """, unsafe_allow_html=True)

        st.header("üí¨ Describe Your Symptoms")
        st.markdown(" ", unsafe_allow_html=True)

        symptoms_input = st.text_area(
            "Enter symptoms (e.g., fatigue, weight loss, lump, pain)", 
            height=100, 
            key="symptoms_text_area"
        )

        if st.button("Analyze Symptoms", key="analyze_button"):
            possible_conditions = [
                "Early Stage Cancer", 
                "Benign Condition", 
                "Requires Further Investigation"
            ]
            advice = [
                "Please consult an oncologist.",
                "Schedule a biopsy or scan.",
                "Monitor symptoms and retest in 2 weeks."
            ]

            st.warning(f"Possible Condition: **{random.choice(possible_conditions)}**")
            st.info(f"Suggested Advice: {random.choice(advice)}")
            st.warning("‚ö†Ô∏è *Disclaimer: AI chatbot outputs are simulated and not a substitute for professional advice.*")

    def Hospital_Resource_Allocation(self):
      st.markdown(" ", unsafe_allow_html=True)
      st.markdown(" ", unsafe_allow_html=True)
      st.markdown(
      """
      <div style='
          background-color: #EEEEEE;
          padding: 10px 20px;
          border-radius: 10px;
          border: 1px solid #ccc;
          margin-bottom: 30px;
          text-align: center;
      '>
          <h4 style='color: #1a1a1a;'> Predicting Hospital Resource needs based on Patient Load and Seasonal Factors </h4>
      """,
      unsafe_allow_html=True
              )

      # Preset Logic
      preset = st.selectbox("ü¶† Select Outbreak Scenario", ["Normal", "Flu Season", "COVID Spike"])

      # Preset values
      presets = {
          "Normal": (300, 20, 0.2),
          "Flu Season": (500, 35, 0.4),
          "COVID Spike": (800, 60, 0.7)
      }
      patients, emergency_rate, seasonal_index = presets[preset]
      st.markdown(" ", unsafe_allow_html=True)

      # Styled container for sliders
      st.markdown(
      """
      <div style='
          background-color: #EEEEEE;
          padding: 10px 20px;
          border-radius: 10px;
          border: 1px solid #ccc;
          margin-bottom: 30px;
          text-align: center;
      '>
          <h4 style='color: #1a1a1a;'> üì• Adjust Simulation Parameters </h4>
      """,
      unsafe_allow_html=True
              )

      col1, col2, col3 = st.columns(3)

      with col1:
          patients = st.slider("Incoming Patients", 50, 1000, patients)

      with col2:
          emergency_rate = st.slider("Emergency Cases (%)", 0, 100, emergency_rate)

      with col3:
          seasonal_index = st.slider("Seasonal Disease Factor (0-1)", 0.0, 1.0, seasonal_index, step=0.01)

      st.markdown("</div>", unsafe_allow_html=True)

      # Prediction Logic (simplified)
      beds_needed = int(patients * (0.4 + seasonal_index))
      icu_needed = int(emergency_rate / 100 * patients * (0.2 + seasonal_index))
      staff_needed = int(patients / 4)
      ventilators_needed = int(icu_needed * 0.6)

      # Current Resources (for comparison)
      current_resources = {
          "Beds": 300,
          "ICU Units": 50,
          "Doctors/Nurses": 80,
          "Ventilators": 25
      }

      predicted_resources = {
          "Beds": beds_needed,
          "ICU Units": icu_needed,
          "Doctors/Nurses": staff_needed,
          "Ventilators": ventilators_needed
      }

      # Create comparison DataFrame
      df = pd.DataFrame({
          "Resource": list(current_resources.keys()),
          "Available": list(current_resources.values()),
          "Needed": list(predicted_resources.values())
      })

      # Chart
      st.markdown(
      """
      <div style='
          background-color: #EEEEEE;
          padding: 10px 20px;
          border-radius: 10px;
          border: 1px solid #ccc;
          margin-bottom: 30px;
          text-align: center;
      '>
          <h4 style='color: #1a1a1a;'> üìä Resource Forecast </h4>
      """,
      unsafe_allow_html=True
              )
      #st.subheader("üìä Resource Forecast")
      fig = px.bar(df, x="Resource", y=["Available", "Needed"],
                  barmode="group") #title="Hospital Resource Prediction")
      st.plotly_chart(fig, use_container_width=True)
      st.markdown("---", unsafe_allow_html=True)

      # Shortfall detection
      st.markdown(
      """
      <div style='
          background-color: #EEEEEE;
          padding: 10px 20px;
          border-radius: 10px;
          border: 1px solid #ccc;
          margin-bottom: 30px;
          text-align: center;
      '>
          <h4 style='color: #1a1a1a;'> ‚ö†Ô∏è Resource Shortfall Summary </h4>
      """,
      unsafe_allow_html=True
              )
      #st.subheader("‚ö†Ô∏è Resource Shortfall Summary")
      for resource in df["Resource"]:
          available = df[df["Resource"] == resource]["Available"].values[0]
          needed = df[df["Resource"] == resource]["Needed"].values[0]
          if needed > available:
              st.error(f"üî¥ {resource}: Shortfall of {needed - available}")
          else:
              st.success(f"üü¢ {resource}: Sufficient ({available - needed} extra)")
      st.markdown("---", unsafe_allow_html=True)

    def ICU_Stay_Forecasting(self):
      st.markdown(" ", unsafe_allow_html=True)
      st.markdown(" ", unsafe_allow_html=True)
      st.markdown(
      """
      <div style='
          background-color: #EEEEEE;
          padding: 10px 20px;
          border-radius: 10px;
          border: 1px solid #ccc;
          margin-bottom: 30px;
          text-align: center;
      '>
          <h4 style='color: #1a1a1a;'> Use AI-powered tool to forecast how long a patient might stay in the ICU based on their admission details and health condition. </h4>
      """,
      unsafe_allow_html=True
              )

      # --- Input Form ---

      st.markdown(
      """
      <div style='
          background-color: #EEEEEE;
          padding: 10px 20px;
          border-radius: 10px;
          border: 1px solid #ccc;
          margin-bottom: 30px;
          text-align: center;
      '>
          <h4 style='color: #1a1a1a;'> üìù Patient Information </h4>
      """,
      unsafe_allow_html=True
              )

      st.markdown("""
      Fill in the details below to estimate ICU stay:
      """)

      with st.form("icu_form"):
          age = st.slider("Age", 18, 90, 45)
          gender = st.selectbox("Gender", ["Male", "Female"])
          admission_type = st.selectbox("Type of Admission", ["Emergency", "Elective"])
          ventilator = st.selectbox("Ventilator Support Required", ["Yes", "No"])
          diabetes = st.selectbox("Diabetes", ["Yes", "No"])
          hypertension = st.selectbox("Hypertension", ["Yes", "No"])
          severity_score = st.slider("Severity Score (10-50)", 10, 50, 25)
          submit = st.form_submit_button("Predict ICU Stay")

      # --- Prediction Logic ---
      def predict_icu_stay(admission, vent, diab, hyper, sev):
          stay = 2 + sev * 0.2
          if admission == "Emergency":
              stay += 2
          if vent == "Yes":
              stay += 3
          if diab == "Yes":
              stay += 1.5
          if hyper == "Yes":
              stay += 1
          stay += np.random.normal(0, 1.2)  # Simulate noise
          return round(max(stay, 1.0), 1)

      # --- Display Prediction ---
      if submit:
          predicted_days = predict_icu_stay(admission_type, ventilator, diabetes, hypertension, severity_score)

          if predicted_days <= 5:
              risk = "üü¢ Short Stay (1-5 days)"
          elif predicted_days <= 10:
              risk = "üü† Moderate Stay (6-10 days)"
          else:
              risk = "üî¥ Long Stay (11+ days)"

          st.success(f"Predicted ICU Stay Duration: **{predicted_days} days**")
          st.info(f"Risk Category: {risk}")

          st.markdown("---")
          #st.markdown("### üìä Want to compare your case with synthetic patient data? Let me know to enable it!")